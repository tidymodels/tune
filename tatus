[1mdiff --cc R/collect.R[m
[1mindex 114cf22,f9eb631..0000000[m
[1m--- a/R/collect.R[m
[1m+++ b/R/collect.R[m
[36m@@@ -590,45 -602,21 +604,17 @@@[m [mestimate_tune_results <- function(x, ..[m
      x <- dplyr::distinct(x)[m
    }[m
  [m
[31m -  x <- tibble::as_tibble(x)[m
[31m -  x <- vctrs::vec_slice(x, x$id != "Apparent")[m
[31m -  x <- x |>[m
[31m -    dplyr::group_by([m
[31m -      !!!rlang::syms(param_names),[m
[31m -      .metric,[m
[31m -      .estimator,[m
[31m -      !!!rlang::syms(group_cols)[m
[31m -    ) |>[m
[32m +  x <- x %>%[m
[32m +    tibble::as_tibble() %>%[m
[31m-     vctrs::vec_slice(., .$id != "Apparent")[m
[31m- [m
[31m-   # Join weights to the data if available[m
[31m-   if (!is.null(fold_weights)) {[m
[31m-     weight_data <- .create_weight_mapping(fold_weights, id_names, x)[m
[31m-     if (!is.null(weight_data)) {[m
[31m-       x <- dplyr::left_join(x, weight_data, by = id_names)[m
[31m-     } else {[m
[31m-       # If weight mapping failed, fall back to unweighted[m
[31m-       fold_weights <- NULL[m
[31m-     }[m
[31m-   }[m
[31m- [m
[31m-   if (!is.null(fold_weights)) {[m
[31m-     # Use weighted aggregation[m
[31m-     x <- x %>%[m
[31m-       dplyr::group_by(!!!rlang::syms(param_names), .metric, .estimator,[m
[31m-                       !!!rlang::syms(group_cols)) %>%[m
[31m-       dplyr::summarize([m
[31m-         mean = .weighted_mean(.estimate, .fold_weight),[m
[31m-         n = sum(!is.na(.estimate)),[m
[31m-         effective_n = .effective_sample_size(.fold_weight[!is.na(.estimate)]),[m
[31m-         std_err = .weighted_sd(.estimate, .fold_weight) / sqrt(pmax(effective_n, 1)),[m
[31m-         .groups = "drop"[m
[31m-       ) %>%[m
[31m-       dplyr::select(-effective_n)[m
[31m-   } else {[m
[31m-     x <- x %>%[m
[31m-       dplyr::group_by(!!!rlang::syms(param_names), .metric, .estimator,[m
[31m-                       !!!rlang::syms(group_cols)) %>%[m
[31m-       dplyr::summarize([m
[31m-         mean = mean(.estimate, na.rm = TRUE),[m
[31m-         n = sum(!is.na(.estimate)),[m
[31m-         std_err = sd(.estimate, na.rm = TRUE) / sqrt(n),[m
[31m-         .groups = "drop"[m
[31m-       )[m
[31m-   }[m
[32m++    vctrs::vec_slice(., .$id != "Apparent") %>%[m
[32m++    dplyr::group_by(!!!rlang::syms(param_names), .metric, .estimator,[m
[32m++                    !!!rlang::syms(group_cols)) %>%[m
[32m+     dplyr::summarize([m
[32m+       mean = mean(.estimate, na.rm = TRUE),[m
[32m+       n = sum(!is.na(.estimate)),[m
[32m+       std_err = sd(.estimate, na.rm = TRUE) / sqrt(n),[m
[32m+       .groups = "drop"[m
[32m+     )[m
  [m
    # only join when parameters are being tuned (#600)[m
    if (length(param_names) == 0) {[m
